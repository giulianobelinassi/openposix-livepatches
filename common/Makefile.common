CC = gcc
ARCH := $(shell uname -p)
ifeq ($(ARCH),ppc64le)
CCARCHFLAGS=-fpatchable-function-entry=14,13
else
CCARCHFLAGS=-fpatchable-function-entry=16,14
endif

INCLUDES = -I../common/
CFLAGS = $(INCLUDES) -D_PACKAGE_NAME=$(PACKAGE_NAME) -D_VERSION=$(VERSION) \
				 -fPIC $(CCARCHFLAGS) -g3 -O2
LDFLAGS= -ldl -lpthread -lrt

TARGET=$(LIVEPATCHES) test

all: $(TARGET) livepatchability

test: test.c
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

libc.so.6.json: /lib64/libc.so.6
	ulp extract $^ -o $@

libpthread.so.0.json: /lib64/libpthread.so.0
	ulp extract $^ -o $@

librt.so.1.json: /lib64/librt.so.1
	ulp extract $^ -o $@

libc_$(GLIBC_PACKAGE_VER)_livepatch1.so: libc_livepatch1.o libc_livepatch1.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

libpthread_$(GLIBC_PACKAGE_VER)_livepatch1.so: libpthread_livepatch1.o libpthread_livepatch1.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

librt_$(GLIBC_PACKAGE_VER)_livepatch1.so: librt_livepatch1.o librt_livepatch1.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

.ONESHELL:
%.dsc: %.in libc.so.6.json libpthread.so.0.json librt.so.1.json
	GLIBC_VERSION=$$(ldd --version | head -n 1 | awk '{print $$4}')
	GLIBC_MAJOR=$${GLIBC_VERSION%.*}
	GLIBC_MINOR=$${GLIBC_VERSION##*.}
	cp $< $@
	sed -i $@ -e s@GLIBCVER@$(GLIBC_PACKAGE_VER)@;
	if [ "$$GLIBC_MAJOR" -eq 2 ] && [ "$$GLIBC_MINOR" -lt 34 ]; then
		sed -i $@ -e s@LIBC@libc.so.6.json@;
		sed -i $@ -e s@LIBPTHREAD@libpthread.so.0.json@;
		sed -i $@ -e s@LIBRT@librt.so.1.json@;
	else
		sed -i $@ -e s@LIBC@libc.so.6.json@;
		sed -i $@ -e s@LIBPTHREAD@libc.so.6.json@;
		sed -i $@ -e s@LIBRT@libc.so.6.json@;
	fi;

%.in:
	./generate_in.sh $@

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $^

.PHONY: livepatchability
livepatchability:
	ulp livepatchable /lib64/libc.so.6

.PHONY: clean check
clean:
	rm -rf test *.o *.so *.swp *.dsc *.json

.ONESHELL:
check: test libc_$(GLIBC_PACKAGE_VER)_livepatch1.so
	LIBPULP_PATH=/usr/lib64/libpulp.so.0;
	if [ ! -f "$${LIBPULP_PATH}" ]; then
		LIBPULP_PATH=/usr/local/lib64/libpulp.so;
	fi;
	if [ ! -f "$${LIBPULP_PATH}" ]; then
		LIBPULP_PATH=/usr/local/lib/libpulp.so;
	fi;
	if [ ! -f "$${LIBPULP_PATH}" ]; then
		echo "ERROR: libpulp not found";
		exit 1;
	fi;
	LD_PRELOAD=$${LIBPULP_PATH} ./test &
	pid=$$! ;
	sleep 0.2;
	for patch in $(LIVEPATCHES); do
		if [ -f $$patch ]; then
			ulp trigger -p $${pid} $$patch | grep success
		fi;
	done;
	wait $${pid};
	if [ $$? -ne 0 ]; then
		echo -e "\033[0;31mFAIL: $(NAME) \033[0m" 1>&2;
		exit 1;
	fi;
	echo -e "\033[0;32mSUCCESS: $(NAME)\033[0m" 1>&2;

.ONESHELL:
install: $(LIVEPATCHES)
	install -d $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME); \
	install $^ $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME);

.ONESHELL:
uninstall:
	rm -rf $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME)
