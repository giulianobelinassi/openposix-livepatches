CC = gcc

VERSION_DIRS=$(shell find ../glibc/* -type d)
VERSIONS=$(shell basename -a $(VERSION_DIRS))
LIVEPATCHES=$(foreach U,$(PATCHES), \
									$(foreach V,$(VERSIONS),$(U)_$(V)_livepatch1.so) \
								 )

INCLUDES = -I../common/
CFLAGS = $(INCLUDES) -fPIC -fpatchable-function-entry=16,14 -g3 -O2
LDFLAGS= -ldl -lpthread -lrt

TARGET=$(LIVEPATCHES) test

all: $(TARGET) livepatchability

test: test.c
	echo $(LIVEPATCHES)
	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS)

libc_%.so: libc_livepatch1.o libc_%.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

librt_%.so: librt_livepatch1.o librt_%.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

libpthread_%.so: libpthread_livepatch1.o libpthread_%.dsc
	$(CC) $(CFLAGS) -shared -o $@ $< $(LDFLAGS)
	ulp packer $(word 2,$^)

define GENERATE_DSC=
	LIBVER=$(word 2,$(subst _, ,$(2)))
	GLIBC_VERSION=$(word 1,$(subst -, ,$(word 2,$(subst _, ,$(2)))))
	GLIBC_MAJOR=$${GLIBC_VERSION%.*}
	GLIBC_MINOR=$${GLIBC_VERSION##*.}
	TARGET_LIB_PATH=../glibc/$$LIBVER
	cp $< $@
	sed -i $@ -e s@$(1)@$(subst .dsc,.so,$(2))@;
	if [ "$$GLIBC_MAJOR" -eq 2 ] && [ "$$GLIBC_MINOR" -lt 34 ]; then
		sed -i $@ -e s@LIBC@"$$TARGET_LIB_PATH"/libc.so.6@;
		sed -i $@ -e s@LIBPTHREAD@"$$TARGET_LIB_PATH"/libpthread.so.0@;
		sed -i $@ -e s@LIBRT@"$$TARGET_LIB_PATH"/librt.so.1@;
	else
		sed -i $@ -e s@LIBC@/lib64/libc.so.6@;
		sed -i $@ -e s@LIBPTHREAD@/lib64/libc.so.6@;
		sed -i $@ -e s@LIBRT@/lib64/libc.so.6@;
	fi;
endef

.ONESHELL:
libc_%.dsc: libc_livepatch1.in
	$(call GENERATE_DSC,libc_livepatch1.so,$@)

librt_%.dsc: librt_livepatch1.in
	$(call GENERATE_DSC,librt_livepatch1.so,$@)

libpthread_%.dsc: libpthread_livepatch1.in
	$(call GENERATE_DSC,libpthread_livepatch1.so,$@)

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $^

.PHONY: livepatchability
livepatchability:
	ulp livepatchable /lib64/libc.so.6

.PHONY: clean check
clean:
	rm -rf test *.o *.so *.swp *.dsc

.ONESHELL:
check: test $(LIVEPATCHES)
	LIBPULP_PATH=/usr/lib64/libpulp.so.0;
	if [ ! -f "$${LIBPULP_PATH}" ]; then
		LIBPULP_PATH=/usr/local/lib64/libpulp.so;
	fi;
	if [ ! -f "$${LIBPULP_PATH}" ]; then
		echo "ERROR: libpulp not found";
		exit 1;
	fi;
	LD_PRELOAD=$${LIBPULP_PATH} ./test &
	pid=$$! ;
	sleep 0.1;
	for patch in $(LIVEPATCHES); do
		if [ -f $$patch ]; then
			ulp trigger -p $${pid} $$patch | grep success
		fi;
	done;
	kill -s 10 $${pid};
	wait $${pid};
	if [ $$? -ne 0 ]; then
		echo -e "\033[0;31mFAIL: $(NAME) \033[0m" 1>&2;
		exit 1;
	fi;
	echo -e "\033[0;32mSUCCESS: $(NAME)\033[0m" 1>&2;

.ONESHELL:
install: $(LIVEPATCHES)
	install -d $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME); \
	install $^ $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME);

.ONESHELL:
uninstall:
	rm -rf $(DESTDIR)/usr/lib64/openposix-livepatches/$(NAME)
