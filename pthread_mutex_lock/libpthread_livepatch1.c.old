#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
#include <unistd.h>
#include <pthread.h>
#include <gnu/lib-names.h>

typedef typeof(pthread_mutex_lock) func_t;

int pthread_mutex_lock_lp(pthread_mutex_t *lock)
{
  static func_t *func_ptr = NULL;
  if (func_ptr == NULL) {
    void *libpthread = dlopen(LIBPTHREAD_SO, RTLD_LAZY);
    if (libpthread == NULL) {
      printf("dlopen: %s\n", dlerror());
      abort();
    }
    func_ptr = dlsym(libpthread, "pthread_mutex_lock");;
    if (func_ptr == NULL) {
      printf("dlsym: %s\n", dlerror());
      abort();
    }
    func_ptr = skip_ulp_redirect_insns(func_ptr);
  }

  int ret = func_ptr(lock);
  return ret;
}
